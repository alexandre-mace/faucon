{"version":3,"sources":["infrastructure/formatter/wikipediaParagraphFormatter.js","infrastructure/formatter/wikipediaUrlFormatter.js","infrastructure/repository/getWikipediaDefinition.js","application/query/getDefinition.js","infrastructure/utils/delayedCloseLoader.js","ui/components/Definition.js","ui/components/Loader.js","ui/components/Information.js","App.js","reportWebVitals.js","index.js"],"names":["wikipediaParagraphFormatter","string","replace","wikipediaUrlFormatter","word","replaceAll","getWikipediaTitle","request","responseXML","querySelectorAll","innerText","getHasSevereWarning","length","getWikipediaDescription","i","secondTitle","descriptionParagraphs","potentialParagraph","includes","tagName","push","previousElementSibling","map","node","reverse","mobilePotentialParagraph","lastChild","Array","from","parentNode","childNodes","filter","getWikipediaRelated","relatedSection","querySelector","loopRelated","className","relateds","formatWikipediaRelated","firstChild","nextSibling","array","getElementsByTagName","getAttribute","decodeURI","getWikipediaDefinition","setter","XMLHttpRequest","open","responseType","onload","e","readyState","status","console","error","statusText","title","description","hasSevereWarning","onerror","send","getDefinition","delayedCloseLoader","setLoading","setTimeout","mediaQuery1","window","matchMedia","relatedRatio","matches","relatedTranslateRatio","prototype","random","this","Math","floor","Definition","count","setCount","loading","useState","data","definitions","needsNewDefinition","setNeedsNewDefinition","seenRelated","setSeenRelated","needsNewRelatedDefinition","setNeedsNewRelatedDefinition","currentDefinition","setCurrentDefinition","hasRunningProcess","setHasRunningProcess","useEffect","potentialNewDefinitions","definition","localPoolRandomSubject","concat","related","role","aria-label","target","rel","href","index","slice","style","fontSize","transform","onClick","Loader","loop","Delay","ms","Backspace","Information","setInformationMode","App","informationMode","scrollTo","id","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95079193.chunk.js","sourcesContent":["const wikipediaParagraphFormatter = (string) => {\n    return string.replace(/\\[\\d+]/g, '').replace(/,{2,}/g, '');\n}\nexport default wikipediaParagraphFormatter","const wikipediaUrlFormatter = (word) => {\n    return \"https://fr.wikipedia.org/wiki/\" + word.replaceAll(' ', '_')\n}\nexport default wikipediaUrlFormatter;","import wikipediaUrlFormatter from \"../formatter/wikipediaUrlFormatter\";\n\nconst getWikipediaDefinition = (word, setter) => {\n    let request = new XMLHttpRequest();\n    // eslint-disable-next-line no-useless-concat\n    request.open(\"GET\", \"https://cors-3000.herokuapp.com/\" + wikipediaUrlFormatter(word), true);  // last parameter must be true\n    request.responseType = \"document\";\n    request.onload = function (e) {\n        if (request.readyState === 4) {\n            if (request.status === 200) {\n                if (typeof setter !== 'undefined') {\n                    const title = getWikipediaTitle(request)\n                    const descriptionParagraphs = getWikipediaDescription(request)\n                    const relateds = getWikipediaRelated(request)\n                    const hasSevereWarning = getHasSevereWarning(request)\n\n                    setter({\n                        title: title,\n                        description: descriptionParagraphs,\n                        relateds: relateds,\n                        hasSevereWarning: hasSevereWarning\n                    })\n                    return;\n                }\n            } else {\n                console.error(request.status, request.statusText);\n\n                setter({\n                    title: 'Page non atteignable',\n                    description: [\"Désolé, Faucon n'a pas pu trouver la page.\"],\n                    relateds: [],\n                    hasSevereWarning: false\n                })\n                return;\n            }\n        }\n    };\n    request.onerror = function (e) {\n        console.error(request.status, request.statusText);\n    };\n    request.send(null);  // no\n}\n\nconst getWikipediaTitle = (request) => {\n    return request.responseXML.querySelectorAll(\"h1\")[0].innerText;\n}\n\nconst getHasSevereWarning = (request) => {\n    return request.responseXML.querySelectorAll(\".bandeau-niveau-grave\").length > 0;\n}\n\nconst getWikipediaDescription = (request) => {\n    const secondTitle = request.responseXML.querySelectorAll(\"h2:not(#mw-toc-heading)\");\n    let descriptionParagraphs = [];\n    let potentialParagraph = secondTitle[0];\n    if (potentialParagraph.innerText.includes('de navigation')) {\n        potentialParagraph = secondTitle[1]\n    }\n    let i;\n    for (i = 0; i < 8; i++) {\n        if (potentialParagraph && potentialParagraph.tagName === 'P') {\n            while (potentialParagraph !== null && potentialParagraph.tagName === 'P') {\n                descriptionParagraphs.push(potentialParagraph)\n                potentialParagraph = potentialParagraph.previousElementSibling\n            }\n            descriptionParagraphs = descriptionParagraphs.map(node => node.innerText).reverse()\n            return descriptionParagraphs\n        }\n        if (potentialParagraph.previousElementSibling && potentialParagraph.previousElementSibling.tagName === 'SECTION') {\n            let mobilePotentialParagraph = potentialParagraph.previousElementSibling.lastChild\n            for (i = 0; i < 5; i++) {\n                if (mobilePotentialParagraph && mobilePotentialParagraph.tagName === 'P') {\n                    return Array.from(mobilePotentialParagraph.parentNode.childNodes)\n                        .filter(node => node.tagName === 'P')\n                        .map(node => node.innerText)\n                }\n                mobilePotentialParagraph = mobilePotentialParagraph.previousElementSibling;\n            }\n        }\n        if (potentialParagraph.previousElementSibling === null) {\n            potentialParagraph = potentialParagraph.parentNode\n        } else {\n            potentialParagraph = potentialParagraph.previousElementSibling\n        }\n    }\n\n    return descriptionParagraphs\n}\n\nconst getWikipediaRelated = (request) => {\n    let relatedSection = request.responseXML.querySelector(\"#Articles_connexes\");\n    if (relatedSection !== null) {\n        let relateds = [];\n        var i;\n        let loopRelated = relatedSection.parentNode;\n        for (i = 0; i < 8; i++) {\n            if (loopRelated && loopRelated.className && loopRelated.className.includes(\"colonnes\")) {\n                if (loopRelated.childNodes[1] && loopRelated.childNodes[1].tagName === 'UL') {\n                    const relateds = Array.from(loopRelated.childNodes[1].childNodes)\n                    return formatWikipediaRelated(relateds);\n                }\n            }\n            if (loopRelated && loopRelated.tagName === 'UL') {\n                const relateds = Array.from(loopRelated.childNodes)\n                return formatWikipediaRelated(relateds);\n            }\n            if (loopRelated.tagName === \"SECTION\" && Array.from(loopRelated.childNodes).length > 0) {\n                if (Array.from(loopRelated.childNodes).filter(node => node.tagName === 'UL').length > 0) {\n                    const relateds = Array.from(Array.from(loopRelated.childNodes).filter(node => node.tagName === 'UL')[0].childNodes)\n                    return formatWikipediaRelated(relateds);\n                }\n\n                if (Array.from(loopRelated.childNodes).filter(node => (node.className && node.className.includes(\"colonnes\"))).length > 0) {\n                    const relateds = Array.from(Array.from(loopRelated.childNodes).filter(node => (node.className && node.className.includes(\"colonnes\")))[0].firstChild.nextSibling.childNodes)\n                    return formatWikipediaRelated(relateds);\n                }\n            }\n            if (loopRelated.nextSibling === null) {\n                loopRelated = loopRelated.parentNode\n            } else {\n                loopRelated = loopRelated.nextSibling\n            }\n        }\n        return relateds;\n    }\n    relatedSection = request.responseXML.querySelector(\"#Voir_aussi\");\n    if (relatedSection !== null) {\n        let loopRelated = relatedSection.parentNode;\n        for (i = 0; i < 5; i++) {\n            if (loopRelated && loopRelated.tagName === 'UL') {\n                const relateds = Array.from(loopRelated.childNodes)\n                return formatWikipediaRelated(relateds);\n            }\n            if (loopRelated.tagName === \"SECTION\" && Array.from(loopRelated.childNodes).length > 0) {\n                if (Array.from(loopRelated.childNodes).filter(node => node.tagName === 'UL').length > 0) {\n                    const relateds = Array.from(Array.from(loopRelated.childNodes).filter(node => node.tagName === 'UL')[0].childNodes)\n                    return formatWikipediaRelated(relateds);\n                }\n                if (Array.from(loopRelated.childNodes).filter(node => (node.className && node.className.includes(\"colonnes\"))).length > 0) {\n                    const relateds = Array.from(Array.from(loopRelated.childNodes).filter(node => (node.className && node.className.includes(\"colonnes\")))[0].firstChild.childNodes)\n                    return formatWikipediaRelated(relateds);\n                }\n            }\n            if (loopRelated.nextSibling === null) {\n                loopRelated = loopRelated.parentNode\n            } else {\n                loopRelated = loopRelated.nextSibling\n            }\n        }\n    }\n    return [];\n\n}\nconst formatWikipediaRelated = (array) => {\n    return array\n        .filter(node => node.tagName === 'LI')\n        .filter(node => !node.innerText.includes('Portail'))\n        .filter(node => node.getElementsByTagName('a').length > 0)\n        .map(node => node.getElementsByTagName('a')[0].getAttribute(\"href\"))\n        .map(node => node.replace('/wiki/', ''))\n        .map(node => decodeURI(node))\n        .map(node => node.replaceAll('_', ' '))\n}\nexport default getWikipediaDefinition","import getWikipediaDefinition from \"../../infrastructure/repository/getWikipediaDefinition\";\n\nconst getDefinition = (word, setter) => {\n    return getWikipediaDefinition(word, setter)\n}\nexport default getDefinition;","const delayedCloseLoader = (setLoading) => {\n    setTimeout(() => {\n        setLoading(false)\n    }, 0);\n}\nexport default delayedCloseLoader;","import React, {useEffect, useState} from 'react';\nimport wikipediaParagraphFormatter from \"../../infrastructure/formatter/wikipediaParagraphFormatter\";\nimport data from \"../../domain/definitions.json\";\nimport getDefinition from \"../../application/query/getDefinition\";\nimport delayedCloseLoader from \"../../infrastructure/utils/delayedCloseLoader\";\nimport wikipediaUrlFormatter from \"../../infrastructure/formatter/wikipediaUrlFormatter\";\n\nlet mediaQuery1 = window.matchMedia(\"(max-width: 600px)\");\nconst relatedRatio = mediaQuery1.matches ? 1 : 1;\nconst relatedTranslateRatio = mediaQuery1.matches ? 20 : 50;\n\n// eslint-disable-next-line no-extend-native\nArray.prototype.random = function () {\n    return this[Math.floor((Math.random() * this.length))];\n}\n\nconst Definition = ({ count, setCount, loading, setLoading }) => {\n    const [definitions] = useState(data);\n    const [needsNewDefinition, setNeedsNewDefinition] = useState(true);\n    const [seenRelated, setSeenRelated] = useState([]);\n    const [needsNewRelatedDefinition, setNeedsNewRelatedDefinition] = useState({\n        status: false\n    });\n    const [currentDefinition, setCurrentDefinition] = useState(null);\n    const [hasRunningProcess, setHasRunningProcess] = useState(true);\n\n    useEffect(() => {\n        if (hasRunningProcess === false) {\n            delayedCloseLoader(setLoading)\n        }\n    }, [hasRunningProcess]);\n\n    useEffect(() => {\n        if (needsNewDefinition) {\n            const potentialNewDefinitions = (currentDefinition === null || typeof currentDefinition === \"undefined\")\n                ? definitions\n                : definitions.filter(definition => definition !== currentDefinition.title)\n\n            setCurrentDefinition(null)\n            if (loading !== true) {\n                setLoading(true)\n            }\n            if (hasRunningProcess !== true) {\n                setHasRunningProcess(true)\n            }\n            const localPoolRandomSubject = potentialNewDefinitions.random()\n            getDefinition(localPoolRandomSubject, setCurrentDefinition)\n            setSeenRelated(seenRelated.concat([localPoolRandomSubject]))\n            setNeedsNewDefinition(false)\n        }\n    }, [needsNewDefinition, definitions]);\n\n    useEffect(() => {\n        if (needsNewRelatedDefinition.status) {\n            setCurrentDefinition(null)\n            setLoading(true)\n            setHasRunningProcess(true)\n            getDefinition(needsNewRelatedDefinition.related, setCurrentDefinition)\n            setSeenRelated(seenRelated.concat([needsNewRelatedDefinition.related]))\n            setNeedsNewRelatedDefinition({\n                status: false\n            })\n        }\n    }, [needsNewRelatedDefinition, definitions]);\n\n    useEffect(() => {\n        if (currentDefinition !== null) {\n            setHasRunningProcess(false)\n        }\n    }, [currentDefinition, setHasRunningProcess]);\n\n    return (\n        <main className={!currentDefinition ? 'main-min' : \"main\"}>\n            {(currentDefinition && !(needsNewDefinition || needsNewRelatedDefinition.status) &&  !loading) &&\n            <>\n                {currentDefinition.hasSevereWarning &&\n                <div className={\"definition-warning\"}>\n                    <span role=\"img\" aria-label=\"warning\">⚠️️</span> Attention, la définition est issue d'un article qui comporte un risque sur la véracité des informations exposées.\n                </div>\n                }\n                <div>\n                    <div className={\"definition-title\"}>{currentDefinition.title}</div>\n                    <div className={\"definition-source\"}>\n                        <a target=\"_blank\" rel=\"noreferrer\"\n                           href={wikipediaUrlFormatter(currentDefinition.title)}>Source</a>\n                    </div>\n                    {currentDefinition.description.map((description, index) => (\n                        <div key={index} className={\"definition-content\"}>\n                            {wikipediaParagraphFormatter(description)}\n                        </div>\n                    ))}\n                    <div className={\"related-wrapper\"}>\n                        {currentDefinition.relateds.slice(0,10).filter(related => !seenRelated.includes(related)).map((related, index) => (\n                            <div key={index} style={{fontSize: Math.random() * relatedRatio + 1 + \"rem\", transform: \"translateY(\" + -Math.random() * relatedTranslateRatio + \"px)\"}} className={\"definition-related\"} onClick={() => {\n                                setCount(count + 1)\n                                setNeedsNewRelatedDefinition({\n                                    status: true,\n                                    related: related\n                                })\n                            }}>\n                                {related}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <button className={\"action-button\"} onClick={() => {\n                    if (currentDefinition.title !== 'Page non atteignable') {\n                        setCount(count + 1)\n                    }\n                    setNeedsNewDefinition(true)\n                }}>Nouvelle définition</button>\n            </>\n            }\n        </main>\n    )\n}\nexport default Definition;","import React from 'react';\nimport Typing from \"react-typing-animation\";\n\nconst Loader = () => {\n    return (\n        <div className={\"loader\"}>\n            <Typing loop={true}>\n                Faucon\n                <Typing.Delay ms={1000} />\n                <Typing.Backspace count={6} />\n                <Typing.Delay ms={200} />\n            </Typing>\n        </div>\n    )\n}\nexport default Loader;","import React from 'react';\n\nconst Information = ({ setInformationMode }) => {\n    return (\n        <main className={\"main\"}>\n            <div>\n                <div className={\"definition-title\"}>Comment ça marche ?</div>\n                <div className={\"definition-content mt-1\"}>\n                    Faucon se sert de wikipédia pour obtenir ses données. <br/>\n                    À chaque chargement de définition, une requête fantôme est générée sur le site wikipedia en formattant l'url.\n                    La réponse HTML est parsée, le titre, la description et les articles connexes sont extraits.\n                    Ils sont présentés dans l'interface qui permet de découvrir la définition et de parcourir à nouveau d'autres définitions afin de créer une navigation sans fin.\n                    Le langage utilisé pour le parsing est Javascript.\n                </div>\n            </div>\n            <button className={\"action-button\"} onClick={() => setInformationMode(false)}>Retour</button>\n        </main>\n    )\n}\nexport default Information;","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport Definition from \"./ui/components/Definition\";\nimport Loader from \"./ui/components/Loader\";\nimport Information from \"./ui/components/Information\";\n\nfunction App() {\n    const [count, setCount] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [informationMode, setInformationMode] = useState(false);\n\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, [count]);\n\n    return (\n        <>\n            <header>\n                <div id=\"maintitle\">\n                    Faucon\n                </div>\n                <div className={\"count\"}><span>{count}</span> sujets étudiés. <span className={\"information\"}><img onClick={() => setInformationMode(true)} src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/60/facebook/230/information-source_2139.png\" alt=\"\"/></span></div>\n                <p id=\"subtitle\">S'informer sur la désinformation</p>\n            </header>\n            {(loading && !informationMode) &&\n                <Loader/>\n            }\n            {!informationMode &&\n                <Definition\n                    count={count}\n                    setCount={setCount}\n                    loading={loading}\n                    setLoading={setLoading}\n                />\n            }\n            {informationMode &&\n                <Information setInformationMode={setInformationMode}/>\n            }\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}